package yarnwrap.server.command;
public class ExecuteCommand { public net.minecraft.server.command.ExecuteCommand wrapperContained; public ExecuteCommand(net.minecraft.server.command.ExecuteCommand wrapperContained) { this.wrapperContained = wrapperContained; }

// public com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType BLOCKS_TOOBIG_EXCEPTION() { return wrapperContained.BLOCKS_TOOBIG_EXCEPTION; }
// public com.mojang.brigadier.exceptions.SimpleCommandExceptionType CONDITIONAL_FAIL_EXCEPTION() { return wrapperContained.CONDITIONAL_FAIL_EXCEPTION; }
// public com.mojang.brigadier.exceptions.DynamicCommandExceptionType CONDITIONAL_FAIL_COUNT_EXCEPTION() { return wrapperContained.CONDITIONAL_FAIL_COUNT_EXCEPTION; }
// public com.mojang.brigadier.suggestion.SuggestionProvider LOOT_CONDITIONS() { return wrapperContained.LOOT_CONDITIONS; }
// public int MAX_BLOCKS() { return wrapperContained.MAX_BLOCKS; }
public com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType INSTANTIATION_FAILURE_EXCEPTION() { return wrapperContained.INSTANTIATION_FAILURE_EXCEPTION; }
// public java.util.OptionalInt testBlocksCondition(yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos start,yarnwrap.util.math.BlockPos end,yarnwrap.util.math.BlockPos destination,boolean masked) { return wrapperContained.testBlocksCondition(world.wrapperContained,start.wrapperContained,end.wrapperContained,destination.wrapperContained,masked); }
// public boolean testScoreCondition(com.mojang.brigadier.context.CommandContext context,Object predicate) { return wrapperContained.testScoreCondition(context,predicate); }
// public yarnwrap.server.command.ServerCommandSource executeStoreData(yarnwrap.server.command.ServerCommandSource source,yarnwrap.command.DataCommandObject object,Object path,java.util.function.IntFunction nbtSetter,boolean requestResult) { return new yarnwrap.server.command.ServerCommandSource(wrapperContained.executeStoreData(source.wrapperContained,object.wrapperContained,path,nbtSetter,requestResult)); }
public void register(com.mojang.brigadier.CommandDispatcher dispatcher,yarnwrap.command.CommandRegistryAccess commandRegistryAccess) { wrapperContained.register(dispatcher,commandRegistryAccess.wrapperContained); }
// public java.util.OptionalInt testBlocksCondition(com.mojang.brigadier.context.CommandContext context,boolean masked) { return wrapperContained.testBlocksCondition(context,masked); }
// public com.mojang.brigadier.builder.ArgumentBuilder addStoreArguments(com.mojang.brigadier.tree.LiteralCommandNode node,com.mojang.brigadier.builder.LiteralArgumentBuilder builder,boolean requestResult) { return wrapperContained.addStoreArguments(node,builder,requestResult); }
// public yarnwrap.server.command.ServerCommandSource executeStoreScore(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets,yarnwrap.scoreboard.ScoreboardObjective objective,boolean requestResult) { return new yarnwrap.server.command.ServerCommandSource(wrapperContained.executeStoreScore(source.wrapperContained,targets,objective.wrapperContained,requestResult)); }
// public yarnwrap.server.command.ServerCommandSource executeStoreBossbar(yarnwrap.server.command.ServerCommandSource source,yarnwrap.entity.boss.CommandBossBar bossBar,boolean storeInValue,boolean requestResult) { return new yarnwrap.server.command.ServerCommandSource(wrapperContained.executeStoreBossbar(source.wrapperContained,bossBar.wrapperContained,storeInValue,requestResult)); }
// public com.mojang.brigadier.builder.ArgumentBuilder addConditionArguments(com.mojang.brigadier.tree.CommandNode root,com.mojang.brigadier.builder.LiteralArgumentBuilder argumentBuilder,boolean positive,yarnwrap.command.CommandRegistryAccess commandRegistryAccess) { return wrapperContained.addConditionArguments(root,argumentBuilder,positive,commandRegistryAccess.wrapperContained); }
// public int countPathMatches(yarnwrap.command.DataCommandObject object,Object path) { return wrapperContained.countPathMatches(object.wrapperContained,path); }
// public int executeNegativeBlockCondition(com.mojang.brigadier.context.CommandContext context,boolean masked) { return wrapperContained.executeNegativeBlockCondition(context,masked); }
// public int executePositiveBlockCondition(com.mojang.brigadier.context.CommandContext context,boolean masked) { return wrapperContained.executePositiveBlockCondition(context,masked); }
// public com.mojang.brigadier.builder.ArgumentBuilder addConditionLogic(com.mojang.brigadier.tree.CommandNode root,com.mojang.brigadier.builder.ArgumentBuilder builder,boolean positive,Object condition) { return wrapperContained.addConditionLogic(root,builder,positive,condition); }
// public boolean testScoreMatch(com.mojang.brigadier.context.CommandContext context,Object range) { return wrapperContained.testScoreMatch(context,range); }
// public java.util.Collection getSourceOrEmptyForConditionFork(com.mojang.brigadier.context.CommandContext context,boolean positive,boolean value) { return wrapperContained.getSourceOrEmptyForConditionFork(context,positive,value); }
// public com.mojang.brigadier.builder.ArgumentBuilder addBlocksConditionLogic(com.mojang.brigadier.tree.CommandNode root,com.mojang.brigadier.builder.ArgumentBuilder builder,boolean positive,boolean masked) { return wrapperContained.addBlocksConditionLogic(root,builder,positive,masked); }
// public com.mojang.brigadier.Command getExistsConditionExecute(boolean positive,Object condition) { return wrapperContained.getExistsConditionExecute(positive,condition); }
// public boolean testLootCondition(yarnwrap.server.command.ServerCommandSource source,yarnwrap.registry.entry.RegistryEntry lootCondition) { return wrapperContained.testLootCondition(source.wrapperContained,lootCondition.wrapperContained); }
// public boolean isLoaded(yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos pos) { return wrapperContained.isLoaded(world.wrapperContained,pos.wrapperContained); }
// public com.mojang.brigadier.builder.LiteralArgumentBuilder addOnArguments(com.mojang.brigadier.tree.CommandNode node,com.mojang.brigadier.builder.LiteralArgumentBuilder builder) { return wrapperContained.addOnArguments(node,builder); }
// public com.mojang.brigadier.RedirectModifier createEntityModifier(java.util.function.Function function) { return wrapperContained.createEntityModifier(function); }
// public com.mojang.brigadier.RedirectModifier createMultiEntityModifier(java.util.function.Function function) { return wrapperContained.createMultiEntityModifier(function); }
// public yarnwrap.server.command.ServerCommandSource summon(yarnwrap.server.command.ServerCommandSource source,Object entityType) { return new yarnwrap.server.command.ServerCommandSource(wrapperContained.summon(source.wrapperContained,entityType)); }
// public void enqueueExecutions(yarnwrap.server.command.AbstractServerCommandSource baseSource,java.util.List sources,java.util.function.Function functionSourceGetter,java.util.function.IntPredicate predicate,com.mojang.brigadier.context.ContextChain contextChain,yarnwrap.nbt.NbtCompound args,yarnwrap.command.ExecutionControl control,Object functionNamesGetter,yarnwrap.command.ExecutionFlags flags) { wrapperContained.enqueueExecutions(baseSource.wrapperContained,sources,functionSourceGetter,predicate,contextChain,args.wrapperContained,control.wrapperContained,functionNamesGetter,flags.wrapperContained); }
// public int countMatchingItems(yarnwrap.server.command.ServerCommandSource source,yarnwrap.util.math.BlockPos pos,yarnwrap.inventory.SlotRange slotRange,java.util.function.Predicate predicate) { return wrapperContained.countMatchingItems(source.wrapperContained,pos.wrapperContained,slotRange.wrapperContained,predicate); }
// public int countMatchingItems(java.lang.Iterable entities,yarnwrap.inventory.SlotRange slotRange,java.util.function.Predicate predicate) { return wrapperContained.countMatchingItems(entities,slotRange.wrapperContained,predicate); }

}