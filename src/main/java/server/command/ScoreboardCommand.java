package yarnwrap.server.command;
public class ScoreboardCommand { public net.minecraft.server.command.ScoreboardCommand wrapperContained; public ScoreboardCommand(net.minecraft.server.command.ScoreboardCommand wrapperContained) { this.wrapperContained = wrapperContained; }

// public com.mojang.brigadier.exceptions.SimpleCommandExceptionType PLAYERS_ENABLE_INVALID_EXCEPTION() { return wrapperContained.PLAYERS_ENABLE_INVALID_EXCEPTION; }
// public com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType PLAYERS_GET_NULL_EXCEPTION() { return wrapperContained.PLAYERS_GET_NULL_EXCEPTION; }
// public com.mojang.brigadier.exceptions.SimpleCommandExceptionType OBJECTIVES_ADD_DUPLICATE_EXCEPTION() { return wrapperContained.OBJECTIVES_ADD_DUPLICATE_EXCEPTION; }
// public com.mojang.brigadier.exceptions.SimpleCommandExceptionType OBJECTIVES_DISPLAY_ALREADY_SET_EXCEPTION() { return wrapperContained.OBJECTIVES_DISPLAY_ALREADY_SET_EXCEPTION; }
// public com.mojang.brigadier.exceptions.SimpleCommandExceptionType PLAYERS_ENABLE_FAILED_EXCEPTION() { return wrapperContained.PLAYERS_ENABLE_FAILED_EXCEPTION; }
// public com.mojang.brigadier.exceptions.SimpleCommandExceptionType OBJECTIVES_DISPLAY_ALREADY_EMPTY_EXCEPTION() { return wrapperContained.OBJECTIVES_DISPLAY_ALREADY_EMPTY_EXCEPTION; }
// public int executeReset(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets) { return wrapperContained.executeReset(source.wrapperContained,targets); }
// public int executeModifyObjective(yarnwrap.server.command.ServerCommandSource source,yarnwrap.scoreboard.ScoreboardObjective objective,yarnwrap.text.Text displayName) { return wrapperContained.executeModifyObjective(source.wrapperContained,objective.wrapperContained,displayName.wrapperContained); }
// public int executeAdd(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets,yarnwrap.scoreboard.ScoreboardObjective objective,int score) { return wrapperContained.executeAdd(source.wrapperContained,targets,objective.wrapperContained,score); }
// public int executeModifyRenderType(yarnwrap.server.command.ServerCommandSource source,yarnwrap.scoreboard.ScoreboardObjective objective,Object type) { return wrapperContained.executeModifyRenderType(source.wrapperContained,objective.wrapperContained,type); }
// public int executeOperation(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets,yarnwrap.scoreboard.ScoreboardObjective targetObjective,Object operation,java.util.Collection sources,yarnwrap.scoreboard.ScoreboardObjective sourceObjectives) { return wrapperContained.executeOperation(source.wrapperContained,targets,targetObjective.wrapperContained,operation,sources,sourceObjectives.wrapperContained); }
// public int executeReset(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets,yarnwrap.scoreboard.ScoreboardObjective objective) { return wrapperContained.executeReset(source.wrapperContained,targets,objective.wrapperContained); }
// public int executeListPlayers(yarnwrap.server.command.ServerCommandSource source) { return wrapperContained.executeListPlayers(source.wrapperContained); }
// public int executeClearDisplay(yarnwrap.server.command.ServerCommandSource source,yarnwrap.scoreboard.ScoreboardDisplaySlot slot) { return wrapperContained.executeClearDisplay(source.wrapperContained,slot.wrapperContained); }
public void register(com.mojang.brigadier.CommandDispatcher dispatcher,yarnwrap.command.CommandRegistryAccess registryAccess) { wrapperContained.register(dispatcher,registryAccess.wrapperContained); }
// public int executeSetDisplay(yarnwrap.server.command.ServerCommandSource source,yarnwrap.scoreboard.ScoreboardDisplaySlot slot,yarnwrap.scoreboard.ScoreboardObjective objective) { return wrapperContained.executeSetDisplay(source.wrapperContained,slot.wrapperContained,objective.wrapperContained); }
// public int executeListObjectives(yarnwrap.server.command.ServerCommandSource source) { return wrapperContained.executeListObjectives(source.wrapperContained); }
// public int executeRemove(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets,yarnwrap.scoreboard.ScoreboardObjective objective,int score) { return wrapperContained.executeRemove(source.wrapperContained,targets,objective.wrapperContained,score); }
// public int executeRemoveObjective(yarnwrap.server.command.ServerCommandSource source,yarnwrap.scoreboard.ScoreboardObjective objective) { return wrapperContained.executeRemoveObjective(source.wrapperContained,objective.wrapperContained); }
// public int executeSet(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets,yarnwrap.scoreboard.ScoreboardObjective objective,int score) { return wrapperContained.executeSet(source.wrapperContained,targets,objective.wrapperContained,score); }
// public com.mojang.brigadier.builder.LiteralArgumentBuilder makeRenderTypeArguments() { return wrapperContained.makeRenderTypeArguments(); }
// public int executeGet(yarnwrap.server.command.ServerCommandSource source,yarnwrap.scoreboard.ScoreHolder scoreHolder,yarnwrap.scoreboard.ScoreboardObjective objective) { return wrapperContained.executeGet(source.wrapperContained,scoreHolder.wrapperContained,objective.wrapperContained); }
// public int executeEnable(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets,yarnwrap.scoreboard.ScoreboardObjective objective) { return wrapperContained.executeEnable(source.wrapperContained,targets,objective.wrapperContained); }
// public int executeAddObjective(yarnwrap.server.command.ServerCommandSource source,java.lang.String objective,yarnwrap.scoreboard.ScoreboardCriterion criteria,yarnwrap.text.Text displayName) { return wrapperContained.executeAddObjective(source.wrapperContained,objective,criteria.wrapperContained,displayName.wrapperContained); }
// public java.util.concurrent.CompletableFuture suggestDisabled(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets,com.mojang.brigadier.suggestion.SuggestionsBuilder builder) { return wrapperContained.suggestDisabled(source.wrapperContained,targets,builder); }
// public int executeListScores(yarnwrap.server.command.ServerCommandSource source,yarnwrap.scoreboard.ScoreHolder scoreHolder) { return wrapperContained.executeListScores(source.wrapperContained,scoreHolder.wrapperContained); }
// public com.mojang.brigadier.builder.ArgumentBuilder makeNumberFormatArguments(yarnwrap.command.CommandRegistryAccess registryAccess,com.mojang.brigadier.builder.ArgumentBuilder argumentBuilder,Object executor) { return wrapperContained.makeNumberFormatArguments(registryAccess.wrapperContained,argumentBuilder,executor); }
// public int executeModifyObjectiveFormat(yarnwrap.server.command.ServerCommandSource source,yarnwrap.scoreboard.ScoreboardObjective objective,yarnwrap.scoreboard.number.NumberFormat format) { return wrapperContained.executeModifyObjectiveFormat(source.wrapperContained,objective.wrapperContained,format.wrapperContained); }
// public int executeModifyDisplayAutoUpdate(yarnwrap.server.command.ServerCommandSource source,yarnwrap.scoreboard.ScoreboardObjective objective,boolean enable) { return wrapperContained.executeModifyDisplayAutoUpdate(source.wrapperContained,objective.wrapperContained,enable); }
// public int executeSetDisplayName(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets,yarnwrap.scoreboard.ScoreboardObjective objective,yarnwrap.text.Text displayName) { return wrapperContained.executeSetDisplayName(source.wrapperContained,targets,objective.wrapperContained,displayName.wrapperContained); }
// public int executeSetNumberFormat(yarnwrap.server.command.ServerCommandSource source,java.util.Collection targets,yarnwrap.scoreboard.ScoreboardObjective objective,yarnwrap.scoreboard.number.NumberFormat numberFormat) { return wrapperContained.executeSetNumberFormat(source.wrapperContained,targets,objective.wrapperContained,numberFormat.wrapperContained); }
// public yarnwrap.text.Text getNextDisplayName(java.util.Collection targets) { return new yarnwrap.text.Text(wrapperContained.getNextDisplayName(targets)); }

}