package yarnwrap.world.gen.foliage;
public class FoliagePlacer { public net.minecraft.world.gen.foliage.FoliagePlacer wrapperContained; public FoliagePlacer(net.minecraft.world.gen.foliage.FoliagePlacer wrapperContained) { this.wrapperContained = wrapperContained; }

// public yarnwrap.util.math.intprovider.IntProvider radius() { return new yarnwrap.util.math.intprovider.IntProvider(wrapperContained.radius); }
// public void radius(yarnwrap.util.math.intprovider.IntProvider value) { wrapperContained.radius = value.wrapperContained; }
// public yarnwrap.util.math.intprovider.IntProvider offset() { return new yarnwrap.util.math.intprovider.IntProvider(wrapperContained.offset); }
// public void offset(yarnwrap.util.math.intprovider.IntProvider value) { wrapperContained.offset = value.wrapperContained; }
public com.mojang.serialization.Codec TYPE_CODEC() { return wrapperContained.TYPE_CODEC; }
// public void TYPE_CODEC(com.mojang.serialization.Codec value) { wrapperContained.TYPE_CODEC = value; }
// public void generate(yarnwrap.world.TestableWorld world,Object placer,yarnwrap.util.math.random.Random random,yarnwrap.world.gen.feature.TreeFeatureConfig config,int trunkHeight,Object treeNode,int foliageHeight,int radius,int offset) { wrapperContained.generate(world.wrapperContained,placer,random.wrapperContained,config.wrapperContained,trunkHeight,treeNode,foliageHeight,radius,offset); }
// public void generateSquare(yarnwrap.world.TestableWorld world,Object placer,yarnwrap.util.math.random.Random random,yarnwrap.world.gen.feature.TreeFeatureConfig config,yarnwrap.util.math.BlockPos centerPos,int radius,int y,boolean giantTrunk) { wrapperContained.generateSquare(world.wrapperContained,placer,random.wrapperContained,config.wrapperContained,centerPos.wrapperContained,radius,y,giantTrunk); }
// public boolean isInvalidForLeaves(yarnwrap.util.math.random.Random random,int dx,int y,int dz,int radius,boolean giantTrunk) { return wrapperContained.isInvalidForLeaves(random.wrapperContained,dx,y,dz,radius,giantTrunk); }
public int getRandomRadius(yarnwrap.util.math.random.Random random,int baseHeight) { return wrapperContained.getRandomRadius(random.wrapperContained,baseHeight); }
public int getRandomHeight(yarnwrap.util.math.random.Random random,int trunkHeight,yarnwrap.world.gen.feature.TreeFeatureConfig config) { return wrapperContained.getRandomHeight(random.wrapperContained,trunkHeight,config.wrapperContained); }
// public void generate(yarnwrap.world.TestableWorld world,Object placer,yarnwrap.util.math.random.Random random,yarnwrap.world.gen.feature.TreeFeatureConfig config,int trunkHeight,Object treeNode,int foliageHeight,int radius) { wrapperContained.generate(world.wrapperContained,placer,random.wrapperContained,config.wrapperContained,trunkHeight,treeNode,foliageHeight,radius); }
// public int getRandomOffset(yarnwrap.util.math.random.Random random) { return wrapperContained.getRandomOffset(random.wrapperContained); }
// public boolean isPositionInvalid(yarnwrap.util.math.random.Random random,int dx,int y,int dz,int radius,boolean giantTrunk) { return wrapperContained.isPositionInvalid(random.wrapperContained,dx,y,dz,radius,giantTrunk); }
// public yarnwrap.world.gen.foliage.FoliagePlacerType getType() { return new yarnwrap.world.gen.foliage.FoliagePlacerType(wrapperContained.getType()); }
// public Object fillFoliagePlacerFields(Object instance) { return wrapperContained.fillFoliagePlacerFields(instance); }
// public boolean placeFoliageBlock(yarnwrap.world.TestableWorld world,Object placer,yarnwrap.util.math.random.Random random,yarnwrap.world.gen.feature.TreeFeatureConfig config,yarnwrap.util.math.BlockPos pos) { return wrapperContained.placeFoliageBlock(world.wrapperContained,placer,random.wrapperContained,config.wrapperContained,pos.wrapperContained); }
// public void generateSquareWithHangingLeaves(yarnwrap.world.TestableWorld world,Object placer,yarnwrap.util.math.random.Random random,yarnwrap.world.gen.feature.TreeFeatureConfig config,yarnwrap.util.math.BlockPos centerPos,int radius,int y,boolean giantTrunk,float hangingLeavesChance,float hangingLeavesExtensionChance) { wrapperContained.generateSquareWithHangingLeaves(world.wrapperContained,placer,random.wrapperContained,config.wrapperContained,centerPos.wrapperContained,radius,y,giantTrunk,hangingLeavesChance,hangingLeavesExtensionChance); }
// public boolean placeFoliageBlock(yarnwrap.world.TestableWorld world,Object placer,yarnwrap.util.math.random.Random random,yarnwrap.world.gen.feature.TreeFeatureConfig config,float chance,yarnwrap.util.math.BlockPos origin,Object pos) { return wrapperContained.placeFoliageBlock(world.wrapperContained,placer,random.wrapperContained,config.wrapperContained,chance,origin.wrapperContained,pos); }

}