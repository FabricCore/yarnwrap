package yarnwrap.world.gen.chunk;
public class ChunkGenerator { public net.minecraft.world.gen.chunk.ChunkGenerator wrapperContained; public ChunkGenerator(net.minecraft.world.gen.chunk.ChunkGenerator wrapperContained) { this.wrapperContained = wrapperContained; }

// public yarnwrap.world.biome.source.BiomeSource biomeSource() { return new yarnwrap.world.biome.source.BiomeSource(wrapperContained.biomeSource); }
// public void biomeSource(yarnwrap.world.biome.source.BiomeSource value) { wrapperContained.biomeSource = value.wrapperContained; }
public com.mojang.serialization.Codec CODEC() { return wrapperContained.CODEC; }
// public void CODEC(com.mojang.serialization.Codec value) { wrapperContained.CODEC = value; }
// public java.util.function.Supplier indexedFeaturesListSupplier() { return wrapperContained.indexedFeaturesListSupplier; }
// public void indexedFeaturesListSupplier(java.util.function.Supplier value) { wrapperContained.indexedFeaturesListSupplier = value; }
// public java.util.function.Function generationSettingsGetter() { return wrapperContained.generationSettingsGetter; }
// public void generationSettingsGetter(java.util.function.Function value) { wrapperContained.generationSettingsGetter = value; }
// public ChunkGenerator(yarnwrap.world.biome.source.BiomeSource biomeSource) { this.wrapperContained = new net.minecraft.world.gen.chunk.ChunkGenerator(biomeSource.wrapperContained); }
// public ChunkGenerator(yarnwrap.world.biome.source.BiomeSource biomeSource,java.util.function.Function generationSettingsGetter) { this.wrapperContained = new net.minecraft.world.gen.chunk.ChunkGenerator(biomeSource.wrapperContained,generationSettingsGetter); }
public java.util.concurrent.CompletableFuture populateNoise(yarnwrap.world.gen.chunk.Blender blender,yarnwrap.world.gen.noise.NoiseConfig noiseConfig,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.populateNoise(blender.wrapperContained,noiseConfig.wrapperContained,structureAccessor.wrapperContained,chunk.wrapperContained); }
public yarnwrap.world.biome.source.BiomeSource getBiomeSource() { return new yarnwrap.world.biome.source.BiomeSource(wrapperContained.getBiomeSource()); }
public int getSpawnHeight(yarnwrap.world.HeightLimitView world) { return wrapperContained.getSpawnHeight(world.wrapperContained); }
public void generateFeatures(yarnwrap.world.StructureWorldAccess world,yarnwrap.world.chunk.Chunk chunk,yarnwrap.world.gen.StructureAccessor structureAccessor) { wrapperContained.generateFeatures(world.wrapperContained,chunk.wrapperContained,structureAccessor.wrapperContained); }
public com.mojang.datafixers.util.Pair locateStructure(yarnwrap.server.world.ServerWorld world,yarnwrap.registry.entry.RegistryEntryList structures,yarnwrap.util.math.BlockPos center,int radius,boolean skipReferencedStructures) { return wrapperContained.locateStructure(world.wrapperContained,structures.wrapperContained,center.wrapperContained,radius,skipReferencedStructures); }
public int getWorldHeight() { return wrapperContained.getWorldHeight(); }
public void populateEntities(yarnwrap.world.ChunkRegion region) { wrapperContained.populateEntities(region.wrapperContained); }
// public void carve(yarnwrap.world.ChunkRegion chunkRegion,long seed,yarnwrap.world.gen.noise.NoiseConfig noiseConfig,yarnwrap.world.biome.source.BiomeAccess biomeAccess,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.world.chunk.Chunk chunk,Object carverStep) { wrapperContained.carve(chunkRegion.wrapperContained,seed,noiseConfig.wrapperContained,biomeAccess.wrapperContained,structureAccessor.wrapperContained,chunk.wrapperContained,carverStep); }
public void buildSurface(yarnwrap.world.ChunkRegion region,yarnwrap.world.gen.StructureAccessor structures,yarnwrap.world.gen.noise.NoiseConfig noiseConfig,yarnwrap.world.chunk.Chunk chunk) { wrapperContained.buildSurface(region.wrapperContained,structures.wrapperContained,noiseConfig.wrapperContained,chunk.wrapperContained); }
public yarnwrap.util.collection.Pool getEntitySpawnList(yarnwrap.registry.entry.RegistryEntry biome,yarnwrap.world.gen.StructureAccessor accessor,yarnwrap.entity.SpawnGroup group,yarnwrap.util.math.BlockPos pos) { return new yarnwrap.util.collection.Pool(wrapperContained.getEntitySpawnList(biome.wrapperContained,accessor.wrapperContained,group.wrapperContained,pos.wrapperContained)); }
public void setStructureStarts(yarnwrap.registry.DynamicRegistryManager registryManager,yarnwrap.world.gen.chunk.placement.StructurePlacementCalculator placementCalculator,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.world.chunk.Chunk chunk,yarnwrap.structure.StructureTemplateManager structureTemplateManager) { wrapperContained.setStructureStarts(registryManager.wrapperContained,placementCalculator.wrapperContained,structureAccessor.wrapperContained,chunk.wrapperContained,structureTemplateManager.wrapperContained); }
public void addStructureReferences(yarnwrap.world.StructureWorldAccess world,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.world.chunk.Chunk chunk) { wrapperContained.addStructureReferences(world.wrapperContained,structureAccessor.wrapperContained,chunk.wrapperContained); }
// public int getHeight(int x,int z,Object heightmap,yarnwrap.world.HeightLimitView world,yarnwrap.world.gen.noise.NoiseConfig noiseConfig) { return wrapperContained.getHeight(x,z,heightmap,world.wrapperContained,noiseConfig.wrapperContained); }
public int getSeaLevel() { return wrapperContained.getSeaLevel(); }
// public int getHeightInGround(int x,int z,Object heightmap,yarnwrap.world.HeightLimitView world,yarnwrap.world.gen.noise.NoiseConfig noiseConfig) { return wrapperContained.getHeightInGround(x,z,heightmap,world.wrapperContained,noiseConfig.wrapperContained); }
// public int getHeightOnGround(int x,int z,Object heightmap,yarnwrap.world.HeightLimitView world,yarnwrap.world.gen.noise.NoiseConfig noiseConfig) { return wrapperContained.getHeightOnGround(x,z,heightmap,world.wrapperContained,noiseConfig.wrapperContained); }
public yarnwrap.world.gen.chunk.VerticalBlockSample getColumnSample(int x,int z,yarnwrap.world.HeightLimitView world,yarnwrap.world.gen.noise.NoiseConfig noiseConfig) { return new yarnwrap.world.gen.chunk.VerticalBlockSample(wrapperContained.getColumnSample(x,z,world.wrapperContained,noiseConfig.wrapperContained)); }
// public com.mojang.serialization.MapCodec getCodec() { return wrapperContained.getCodec(); }
public int getMinimumY() { return wrapperContained.getMinimumY(); }
// public int getStructureReferences(yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.world.chunk.Chunk chunk,yarnwrap.util.math.ChunkSectionPos sectionPos,yarnwrap.world.gen.structure.Structure structure) { return wrapperContained.getStructureReferences(structureAccessor.wrapperContained,chunk.wrapperContained,sectionPos.wrapperContained,structure.wrapperContained); }
// public void method_38265(yarnwrap.world.StructureWorldAccess start) { wrapperContained.method_38265(start.wrapperContained); }
// public java.lang.Integer method_38268(yarnwrap.world.gen.structure.Structure structureType) { return wrapperContained.method_38268(structureType.wrapperContained); }
public java.util.concurrent.CompletableFuture populateBiomes(yarnwrap.world.gen.noise.NoiseConfig noiseConfig,yarnwrap.world.gen.chunk.Blender blender,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.populateBiomes(noiseConfig.wrapperContained,blender.wrapperContained,structureAccessor.wrapperContained,chunk.wrapperContained); }
public java.util.Optional getCodecKey() { return wrapperContained.getCodecKey(); }
// public yarnwrap.util.math.BlockBox getBlockBoxForChunk(yarnwrap.world.chunk.Chunk chunk) { return new yarnwrap.util.math.BlockBox(wrapperContained.getBlockBoxForChunk(chunk.wrapperContained)); }
// public void method_39787(yarnwrap.world.StructureWorldAccess pos) { wrapperContained.method_39787(pos.wrapperContained); }
// public void method_39788(it.unimi.dsi.fastutil.ints.IntSet feature) { wrapperContained.method_39788(feature); }
// public com.mojang.datafixers.util.Pair locateRandomSpreadStructure(java.util.Set structures,yarnwrap.world.WorldView world,yarnwrap.world.gen.StructureAccessor structureAccessor,int centerChunkX,int centerChunkZ,int radius,boolean skipReferencedStructures,long seed,yarnwrap.world.gen.chunk.placement.RandomSpreadStructurePlacement placement) { return wrapperContained.locateRandomSpreadStructure(structures,world.wrapperContained,structureAccessor.wrapperContained,centerChunkX,centerChunkZ,radius,skipReferencedStructures,seed,placement.wrapperContained); }
// public com.mojang.datafixers.util.Pair locateConcentricRingsStructure(java.util.Set structures,yarnwrap.server.world.ServerWorld world,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.util.math.BlockPos center,boolean skipReferencedStructures,yarnwrap.world.gen.chunk.placement.ConcentricRingsStructurePlacement placement) { return wrapperContained.locateConcentricRingsStructure(structures,world.wrapperContained,structureAccessor.wrapperContained,center.wrapperContained,skipReferencedStructures,placement.wrapperContained); }
public void getDebugHudText(java.util.List text,yarnwrap.world.gen.noise.NoiseConfig noiseConfig,yarnwrap.util.math.BlockPos pos) { wrapperContained.getDebugHudText(text,noiseConfig.wrapperContained,pos.wrapperContained); }
// public boolean method_41040(yarnwrap.world.gen.StructureAccessor start) { return wrapperContained.method_41040(start.wrapperContained); }
// public void method_41041(yarnwrap.world.gen.StructureAccessor structureSet) { wrapperContained.method_41041(structureSet.wrapperContained); }
// public boolean trySetStructureStart(Object weightedEntry,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.registry.DynamicRegistryManager dynamicRegistryManager,yarnwrap.world.gen.noise.NoiseConfig noiseConfig,yarnwrap.structure.StructureTemplateManager structureManager,long seed,yarnwrap.world.chunk.Chunk chunk,yarnwrap.util.math.ChunkPos pos,yarnwrap.util.math.ChunkSectionPos sectionPos) { return wrapperContained.trySetStructureStart(weightedEntry,structureAccessor.wrapperContained,dynamicRegistryManager.wrapperContained,noiseConfig.wrapperContained,structureManager.wrapperContained,seed,chunk.wrapperContained,pos.wrapperContained,sectionPos.wrapperContained); }
// public java.lang.String method_41045(yarnwrap.structure.StructureStart structureTypeRegistry) { return wrapperContained.method_41045(structureTypeRegistry.wrapperContained); }
// public java.util.Set method_41046(yarnwrap.world.gen.chunk.placement.StructurePlacement placement) { return wrapperContained.method_41046(placement.wrapperContained); }
// public boolean method_41047(yarnwrap.util.math.BlockPos start) { return wrapperContained.method_41047(start.wrapperContained); }
// public void method_41052(org.apache.commons.lang3.mutable.MutableBoolean start) { wrapperContained.method_41052(start); }
// public boolean checkNotReferenced(yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.structure.StructureStart start) { return wrapperContained.checkNotReferenced(structureAccessor.wrapperContained,start.wrapperContained); }
// public com.mojang.datafixers.util.Pair locateStructure(java.util.Set structures,yarnwrap.world.WorldView world,yarnwrap.world.gen.StructureAccessor structureAccessor,boolean skipReferencedStructures,yarnwrap.world.gen.chunk.placement.StructurePlacement placement,yarnwrap.util.math.ChunkPos pos) { return wrapperContained.locateStructure(structures,world.wrapperContained,structureAccessor.wrapperContained,skipReferencedStructures,placement.wrapperContained,pos.wrapperContained); }
public yarnwrap.world.biome.GenerationSettings getGenerationSettings(yarnwrap.registry.entry.RegistryEntry biomeEntry) { return new yarnwrap.world.biome.GenerationSettings(wrapperContained.getGenerationSettings(biomeEntry.wrapperContained)); }
// public java.util.List method_44217(java.util.function.Function biomeEntry) { return wrapperContained.method_44217(biomeEntry); }
// public yarnwrap.world.biome.GenerationSettings method_44218(yarnwrap.registry.entry.RegistryEntry biomeEntry) { return new yarnwrap.world.biome.GenerationSettings(wrapperContained.method_44218(biomeEntry.wrapperContained)); }
public yarnwrap.world.gen.chunk.placement.StructurePlacementCalculator createStructurePlacementCalculator(yarnwrap.registry.RegistryWrapper structureSetRegistry,yarnwrap.world.gen.noise.NoiseConfig noiseConfig,long seed) { return new yarnwrap.world.gen.chunk.placement.StructurePlacementCalculator(wrapperContained.createStructurePlacementCalculator(structureSetRegistry.wrapperContained,noiseConfig.wrapperContained,seed)); }
public void initializeIndexedFeaturesList() { wrapperContained.initializeIndexedFeaturesList(); }

}