package yarnwrap.world.chunk;
public class ChunkGenerating { public net.minecraft.world.chunk.ChunkGenerating wrapperContained; public ChunkGenerating(net.minecraft.world.chunk.ChunkGenerating wrapperContained) { this.wrapperContained = wrapperContained; }

// public java.util.concurrent.CompletableFuture initializeLight(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.initializeLight(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public boolean isLightOn(yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.isLightOn(chunk.wrapperContained); }
// public java.util.concurrent.CompletableFuture noop(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.noop(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public yarnwrap.world.chunk.Chunk method_57599(yarnwrap.world.chunk.Chunk populated) { return new yarnwrap.world.chunk.Chunk(wrapperContained.method_57599(populated.wrapperContained)); }
// public java.util.concurrent.CompletableFuture loadStructures(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.loadStructures(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public java.util.concurrent.CompletableFuture generateStructures(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.generateStructures(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public java.util.concurrent.CompletableFuture generateStructureReferences(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.generateStructureReferences(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public java.util.concurrent.CompletableFuture populateBiomes(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.populateBiomes(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public java.util.concurrent.CompletableFuture populateNoise(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.populateNoise(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public java.util.concurrent.CompletableFuture buildSurface(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.buildSurface(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public java.util.concurrent.CompletableFuture carve(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.carve(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public java.util.concurrent.CompletableFuture generateFeatures(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.generateFeatures(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public java.util.concurrent.CompletableFuture generateEntities(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.generateEntities(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public void addEntities(yarnwrap.server.world.ServerWorld world,java.util.List entities) { wrapperContained.addEntities(world.wrapperContained,entities); }
// public java.util.concurrent.CompletableFuture light(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.light(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }
// public java.util.concurrent.CompletableFuture convertToFullChunk(yarnwrap.world.chunk.ChunkGenerationContext context,yarnwrap.world.chunk.ChunkGenerationStep step,yarnwrap.util.collection.BoundedRegionArray chunks,yarnwrap.world.chunk.Chunk chunk) { return wrapperContained.convertToFullChunk(context.wrapperContained,step.wrapperContained,chunks.wrapperContained,chunk.wrapperContained); }

}