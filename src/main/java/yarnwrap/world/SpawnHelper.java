package yarnwrap.world;
public class SpawnHelper { public net.minecraft.world.SpawnHelper wrapperContained; public SpawnHelper(net.minecraft.world.SpawnHelper wrapperContained) { this.wrapperContained = wrapperContained; }

// public int CHUNK_AREA() { return wrapperContained.CHUNK_AREA; }
// public void CHUNK_AREA(int value) { wrapperContained.CHUNK_AREA = value; }
// public net.minecraft.entity.SpawnGroup[] SPAWNABLE_GROUPS() { return wrapperContained.SPAWNABLE_GROUPS; }
// public void SPAWNABLE_GROUPS(net.minecraft.entity.SpawnGroup[] value) { wrapperContained.SPAWNABLE_GROUPS = value; }
// public int MIN_SPAWN_DISTANCE() { return wrapperContained.MIN_SPAWN_DISTANCE; }
// public void MIN_SPAWN_DISTANCE(int value) { wrapperContained.MIN_SPAWN_DISTANCE = value; }
// public org.slf4j.Logger LOGGER() { return wrapperContained.LOGGER; }
// public void LOGGER(org.slf4j.Logger value) { wrapperContained.LOGGER = value; }
// public void spawnEntitiesInChunk(yarnwrap.entity.SpawnGroup group,yarnwrap.server.world.ServerWorld world,yarnwrap.world.chunk.Chunk chunk,yarnwrap.util.math.BlockPos pos,Object checker,Object runner) { wrapperContained.spawnEntitiesInChunk(group.wrapperContained,world.wrapperContained,chunk.wrapperContained,pos.wrapperContained,checker,runner); }
// public yarnwrap.entity.mob.MobEntity createMob(yarnwrap.server.world.ServerWorld world,yarnwrap.entity.EntityType type) { return new yarnwrap.entity.mob.MobEntity(wrapperContained.createMob(world.wrapperContained,type.wrapperContained)); }
// public boolean isValidSpawn(yarnwrap.server.world.ServerWorld world,yarnwrap.entity.mob.MobEntity entity,double squaredDistance) { return wrapperContained.isValidSpawn(world.wrapperContained,entity.wrapperContained,squaredDistance); }
// public boolean isAcceptableSpawnPosition(yarnwrap.server.world.ServerWorld world,yarnwrap.world.chunk.Chunk chunk,Object pos,double squaredDistance) { return wrapperContained.isAcceptableSpawnPosition(world.wrapperContained,chunk.wrapperContained,pos,squaredDistance); }
// public boolean canSpawn(yarnwrap.server.world.ServerWorld world,yarnwrap.entity.SpawnGroup group,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.world.gen.chunk.ChunkGenerator chunkGenerator,Object spawnEntry,Object pos,double squaredDistance) { return wrapperContained.canSpawn(world.wrapperContained,group.wrapperContained,structureAccessor.wrapperContained,chunkGenerator.wrapperContained,spawnEntry,pos,squaredDistance); }
// public Object setupSpawn(int spawningChunkCount,java.lang.Iterable entities,Object chunkSource,yarnwrap.world.SpawnDensityCapper densityCapper) { return wrapperContained.setupSpawn(spawningChunkCount,entities,chunkSource,densityCapper.wrapperContained); }
// public void spawn(yarnwrap.server.world.ServerWorld world,yarnwrap.world.chunk.WorldChunk chunk,Object info,boolean spawnAnimals,boolean spawnMonsters,boolean rareSpawn) { wrapperContained.spawn(world.wrapperContained,chunk.wrapperContained,info,spawnAnimals,spawnMonsters,rareSpawn); }
// public yarnwrap.world.biome.Biome getBiomeDirectly(yarnwrap.util.math.BlockPos pos,yarnwrap.world.chunk.Chunk chunk) { return new yarnwrap.world.biome.Biome(wrapperContained.getBiomeDirectly(pos.wrapperContained,chunk.wrapperContained)); }
// public yarnwrap.util.collection.Pool getSpawnEntries(yarnwrap.server.world.ServerWorld world,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.world.gen.chunk.ChunkGenerator chunkGenerator,yarnwrap.entity.SpawnGroup spawnGroup,yarnwrap.util.math.BlockPos pos,yarnwrap.registry.entry.RegistryEntry biomeEntry) { return new yarnwrap.util.collection.Pool(wrapperContained.getSpawnEntries(world.wrapperContained,structureAccessor.wrapperContained,chunkGenerator.wrapperContained,spawnGroup.wrapperContained,pos.wrapperContained,biomeEntry.wrapperContained)); }
public void spawnEntitiesInChunk(yarnwrap.entity.SpawnGroup group,yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos pos) { wrapperContained.spawnEntitiesInChunk(group.wrapperContained,world.wrapperContained,pos.wrapperContained); }
public boolean shouldUseNetherFortressSpawns(yarnwrap.util.math.BlockPos pos,yarnwrap.server.world.ServerWorld world,yarnwrap.entity.SpawnGroup spawnGroup,yarnwrap.world.gen.StructureAccessor structureAccessor) { return wrapperContained.shouldUseNetherFortressSpawns(pos.wrapperContained,world.wrapperContained,spawnGroup.wrapperContained,structureAccessor.wrapperContained); }
// public yarnwrap.util.math.BlockPos getRandomPosInChunkSection(yarnwrap.world.World world,yarnwrap.world.chunk.WorldChunk chunk) { return new yarnwrap.util.math.BlockPos(wrapperContained.getRandomPosInChunkSection(world.wrapperContained,chunk.wrapperContained)); }
// public yarnwrap.util.math.BlockPos getEntitySpawnPos(yarnwrap.world.WorldView world,yarnwrap.entity.EntityType entityType,int x,int z) { return new yarnwrap.util.math.BlockPos(wrapperContained.getEntitySpawnPos(world.wrapperContained,entityType.wrapperContained,x,z)); }
// public boolean containsSpawnEntry(yarnwrap.server.world.ServerWorld world,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.world.gen.chunk.ChunkGenerator chunkGenerator,yarnwrap.entity.SpawnGroup spawnGroup,Object spawnEntry,yarnwrap.util.math.BlockPos pos) { return wrapperContained.containsSpawnEntry(world.wrapperContained,structureAccessor.wrapperContained,chunkGenerator.wrapperContained,spawnGroup.wrapperContained,spawnEntry,pos.wrapperContained); }
public void populateEntities(yarnwrap.world.ServerWorldAccess world,yarnwrap.registry.entry.RegistryEntry biomeEntry,yarnwrap.util.math.ChunkPos chunkPos,yarnwrap.util.math.random.Random random) { wrapperContained.populateEntities(world.wrapperContained,biomeEntry.wrapperContained,chunkPos.wrapperContained,random.wrapperContained); }
public boolean isClearForSpawn(yarnwrap.world.BlockView blockView,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.fluid.FluidState fluidState,yarnwrap.entity.EntityType entityType) { return wrapperContained.isClearForSpawn(blockView.wrapperContained,pos.wrapperContained,state.wrapperContained,fluidState.wrapperContained,entityType.wrapperContained); }
// public void spawnEntitiesInChunk(yarnwrap.entity.SpawnGroup group,yarnwrap.server.world.ServerWorld world,yarnwrap.world.chunk.WorldChunk chunk,Object checker,Object runner) { wrapperContained.spawnEntitiesInChunk(group.wrapperContained,world.wrapperContained,chunk.wrapperContained,checker,runner); }
// public java.util.Optional pickRandomSpawnEntry(yarnwrap.server.world.ServerWorld world,yarnwrap.world.gen.StructureAccessor structureAccessor,yarnwrap.world.gen.chunk.ChunkGenerator chunkGenerator,yarnwrap.entity.SpawnGroup spawnGroup,yarnwrap.util.math.random.Random random,yarnwrap.util.math.BlockPos pos) { return wrapperContained.pickRandomSpawnEntry(world.wrapperContained,structureAccessor.wrapperContained,chunkGenerator.wrapperContained,spawnGroup.wrapperContained,random.wrapperContained,pos.wrapperContained); }

}