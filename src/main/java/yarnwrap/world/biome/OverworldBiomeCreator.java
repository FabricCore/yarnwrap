package yarnwrap.world.biome;
public class OverworldBiomeCreator { public net.minecraft.world.biome.OverworldBiomeCreator wrapperContained; public OverworldBiomeCreator(net.minecraft.world.biome.OverworldBiomeCreator wrapperContained) { this.wrapperContained = wrapperContained; }

// public int DEFAULT_WATER_COLOR() { return wrapperContained.DEFAULT_WATER_COLOR; }
// public void DEFAULT_WATER_COLOR(int value) { wrapperContained.DEFAULT_WATER_COLOR = value; }
// public int DEFAULT_WATER_FOG_COLOR() { return wrapperContained.DEFAULT_WATER_FOG_COLOR; }
// public void DEFAULT_WATER_FOG_COLOR(int value) { wrapperContained.DEFAULT_WATER_FOG_COLOR = value; }
// public int DEFAULT_FOG_COLOR() { return wrapperContained.DEFAULT_FOG_COLOR; }
// public void DEFAULT_FOG_COLOR(int value) { wrapperContained.DEFAULT_FOG_COLOR = value; }
// public yarnwrap.sound.MusicSound DEFAULT_MUSIC() { return new yarnwrap.sound.MusicSound(wrapperContained.DEFAULT_MUSIC); }
// public void DEFAULT_MUSIC(yarnwrap.sound.MusicSound value) { wrapperContained.DEFAULT_MUSIC = value.wrapperContained; }
public int SWAMP_SKELETON_WEIGHT() { return wrapperContained.SWAMP_SKELETON_WEIGHT; }
// public void SWAMP_SKELETON_WEIGHT(int value) { wrapperContained.SWAMP_SKELETON_WEIGHT = value; }
public yarnwrap.world.biome.Biome createJungle(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createJungle(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createMushroomFields(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createMushroomFields(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createBeach(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean snowy,boolean stony) { return new yarnwrap.world.biome.Biome(wrapperContained.createBeach(featureLookup.wrapperContained,carverLookup.wrapperContained,snowy,stony)); }
public yarnwrap.world.biome.Biome createRiver(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean frozen) { return new yarnwrap.world.biome.Biome(wrapperContained.createRiver(featureLookup.wrapperContained,carverLookup.wrapperContained,frozen)); }
public yarnwrap.world.biome.Biome createOldGrowthTaiga(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean spruce) { return new yarnwrap.world.biome.Biome(wrapperContained.createOldGrowthTaiga(featureLookup.wrapperContained,carverLookup.wrapperContained,spruce)); }
public yarnwrap.world.biome.Biome createWindsweptHills(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean forest) { return new yarnwrap.world.biome.Biome(wrapperContained.createWindsweptHills(featureLookup.wrapperContained,carverLookup.wrapperContained,forest)); }
// public yarnwrap.world.biome.Biome createOcean(Object spawnSettings,int waterColor,int waterFogColor,Object generationSettings) { return new yarnwrap.world.biome.Biome(wrapperContained.createOcean(spawnSettings,waterColor,waterFogColor,generationSettings)); }
public yarnwrap.world.biome.Biome createSavanna(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean windswept,boolean plateau) { return new yarnwrap.world.biome.Biome(wrapperContained.createSavanna(featureLookup.wrapperContained,carverLookup.wrapperContained,windswept,plateau)); }
// public yarnwrap.world.biome.Biome createJungleFeatures(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,float depth,boolean bamboo,boolean sparse,boolean unmodified,Object spawnSettings,yarnwrap.sound.MusicSound music) { return new yarnwrap.world.biome.Biome(wrapperContained.createJungleFeatures(featureLookup.wrapperContained,carverLookup.wrapperContained,depth,bamboo,sparse,unmodified,spawnSettings,music.wrapperContained)); }
public yarnwrap.world.biome.Biome createBadlands(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean plateau) { return new yarnwrap.world.biome.Biome(wrapperContained.createBadlands(featureLookup.wrapperContained,carverLookup.wrapperContained,plateau)); }
public yarnwrap.world.biome.Biome createDesert(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createDesert(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createTaiga(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean snowy) { return new yarnwrap.world.biome.Biome(wrapperContained.createTaiga(featureLookup.wrapperContained,carverLookup.wrapperContained,snowy)); }
public yarnwrap.world.biome.Biome createPlains(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean sunflower,boolean snowy,boolean iceSpikes) { return new yarnwrap.world.biome.Biome(wrapperContained.createPlains(featureLookup.wrapperContained,carverLookup.wrapperContained,sunflower,snowy,iceSpikes)); }
public yarnwrap.world.biome.Biome createColdOcean(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean deep) { return new yarnwrap.world.biome.Biome(wrapperContained.createColdOcean(featureLookup.wrapperContained,carverLookup.wrapperContained,deep)); }
public yarnwrap.world.biome.Biome createSparseJungle(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createSparseJungle(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createNormalForest(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean birch,boolean oldGrowth,boolean flower) { return new yarnwrap.world.biome.Biome(wrapperContained.createNormalForest(featureLookup.wrapperContained,carverLookup.wrapperContained,birch,oldGrowth,flower)); }
public yarnwrap.world.biome.Biome createDarkForest(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createDarkForest(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createNormalOcean(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean deep) { return new yarnwrap.world.biome.Biome(wrapperContained.createNormalOcean(featureLookup.wrapperContained,carverLookup.wrapperContained,deep)); }
public yarnwrap.world.biome.Biome createSwamp(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createSwamp(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createLukewarmOcean(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean deep) { return new yarnwrap.world.biome.Biome(wrapperContained.createLukewarmOcean(featureLookup.wrapperContained,carverLookup.wrapperContained,deep)); }
public yarnwrap.world.biome.Biome createFrozenOcean(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean deep) { return new yarnwrap.world.biome.Biome(wrapperContained.createFrozenOcean(featureLookup.wrapperContained,carverLookup.wrapperContained,deep)); }
public yarnwrap.world.biome.Biome createNormalBambooJungle(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createNormalBambooJungle(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createWarmOcean(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createWarmOcean(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createTheVoid(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createTheVoid(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
// public int getSkyColor(float temperature) { return wrapperContained.getSkyColor(temperature); }
// public Object createOceanGenerationSettings(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return wrapperContained.createOceanGenerationSettings(featureLookup.wrapperContained,carverLookup.wrapperContained); }
public yarnwrap.world.biome.Biome createDripstoneCaves(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createDripstoneCaves(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createLushCaves(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createLushCaves(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createMeadow(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup,boolean cherryGrove) { return new yarnwrap.world.biome.Biome(wrapperContained.createMeadow(featureLookup.wrapperContained,carverLookup.wrapperContained,cherryGrove)); }
public yarnwrap.world.biome.Biome createFrozenPeaks(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createFrozenPeaks(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createJaggedPeaks(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createJaggedPeaks(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createStonyPeaks(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createStonyPeaks(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createSnowySlopes(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createSnowySlopes(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createGrove(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createGrove(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
// public yarnwrap.world.biome.Biome createBiome(boolean precipitation,float temperature,float downfall,int waterColor,int waterFogColor,java.lang.Integer grassColor,java.lang.Integer foliageColor,Object spawnSettings,Object generationSettings,yarnwrap.sound.MusicSound music) { return new yarnwrap.world.biome.Biome(wrapperContained.createBiome(precipitation,temperature,downfall,waterColor,waterFogColor,grassColor,foliageColor,spawnSettings,generationSettings,music.wrapperContained)); }
// public yarnwrap.world.biome.Biome createBiome(boolean precipitation,float temperature,float downfall,Object spawnSettings,Object generationSettings,yarnwrap.sound.MusicSound music) { return new yarnwrap.world.biome.Biome(wrapperContained.createBiome(precipitation,temperature,downfall,spawnSettings,generationSettings,music.wrapperContained)); }
// public void addBasicFeatures(Object generationSettings) { wrapperContained.addBasicFeatures(generationSettings); }
public yarnwrap.world.biome.Biome createDeepDark(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createDeepDark(featureLookup.wrapperContained,carverLookup.wrapperContained)); }
public yarnwrap.world.biome.Biome createMangroveSwamp(yarnwrap.registry.RegistryEntryLookup featureLookup,yarnwrap.registry.RegistryEntryLookup carverLookup) { return new yarnwrap.world.biome.Biome(wrapperContained.createMangroveSwamp(featureLookup.wrapperContained,carverLookup.wrapperContained)); }

}