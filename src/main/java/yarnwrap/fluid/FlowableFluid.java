package yarnwrap.fluid;
public class FlowableFluid { public net.minecraft.fluid.FlowableFluid wrapperContained; public FlowableFluid(net.minecraft.fluid.FlowableFluid wrapperContained) { this.wrapperContained = wrapperContained; }

// public yarnwrap.state.property.IntProperty LEVEL() { return new yarnwrap.state.property.IntProperty(wrapperContained.LEVEL); }
// public void LEVEL(yarnwrap.state.property.IntProperty value) { wrapperContained.LEVEL = value.wrapperContained; }
public static yarnwrap.state.property.IntProperty LEVEL() { return new yarnwrap.state.property.IntProperty(net.minecraft.fluid.FlowableFluid.LEVEL); }
// public static void LEVEL(yarnwrap.state.property.IntProperty value, ) { net.minecraft.fluid.FlowableFluid.LEVEL = value.wrapperContained; }

// public yarnwrap.state.property.BooleanProperty FALLING() { return new yarnwrap.state.property.BooleanProperty(wrapperContained.FALLING); }
// public void FALLING(yarnwrap.state.property.BooleanProperty value) { wrapperContained.FALLING = value.wrapperContained; }
public static yarnwrap.state.property.BooleanProperty FALLING() { return new yarnwrap.state.property.BooleanProperty(net.minecraft.fluid.FlowableFluid.FALLING); }
// public static void FALLING(yarnwrap.state.property.BooleanProperty value, ) { net.minecraft.fluid.FlowableFluid.FALLING = value.wrapperContained; }

// public java.util.Map shapeCache() { return wrapperContained.shapeCache; }
// public void shapeCache(java.util.Map value) { wrapperContained.shapeCache = value; }
// public static java.util.Map shapeCache() { return net.minecraft.fluid.FlowableFluid.shapeCache; }
// public static void shapeCache(java.util.Map value, ) { net.minecraft.fluid.FlowableFluid.shapeCache = value; }

// public void tryFlow(yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos fluidPos,yarnwrap.block.BlockState blockState,yarnwrap.fluid.FluidState fluidState) { wrapperContained.tryFlow(world.wrapperContained,fluidPos.wrapperContained,blockState.wrapperContained,fluidState.wrapperContained); }
// public static void tryFlow(yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos fluidPos,yarnwrap.block.BlockState blockState,yarnwrap.fluid.FluidState fluidState, ) { net.minecraft.fluid.FlowableFluid.tryFlow(world.wrapperContained,fluidPos.wrapperContained,blockState.wrapperContained,fluidState.wrapperContained); }
// public java.util.Map getSpread(yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state) { return wrapperContained.getSpread(world.wrapperContained,pos.wrapperContained,state.wrapperContained); }
// public static java.util.Map getSpread(yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state, ) { return net.minecraft.fluid.FlowableFluid.getSpread(world.wrapperContained,pos.wrapperContained,state.wrapperContained); }
// public yarnwrap.fluid.FluidState getUpdatedState(yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state) { return new yarnwrap.fluid.FluidState(wrapperContained.getUpdatedState(world.wrapperContained,pos.wrapperContained,state.wrapperContained)); }
// public static yarnwrap.fluid.FluidState getUpdatedState(yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state, ) { return new yarnwrap.fluid.FluidState(net.minecraft.fluid.FlowableFluid.getUpdatedState(world.wrapperContained,pos.wrapperContained,state.wrapperContained)); }
public yarnwrap.fluid.FluidState getFlowing(int level,boolean falling) { return new yarnwrap.fluid.FluidState(wrapperContained.getFlowing(level,falling)); }
// public static yarnwrap.fluid.FluidState getFlowing(int level,boolean falling, ) { return new yarnwrap.fluid.FluidState(net.minecraft.fluid.FlowableFluid.getFlowing(level,falling)); }
public yarnwrap.fluid.FluidState getStill(boolean falling) { return new yarnwrap.fluid.FluidState(wrapperContained.getStill(falling)); }
// public static yarnwrap.fluid.FluidState getStill(boolean falling, ) { return new yarnwrap.fluid.FluidState(net.minecraft.fluid.FlowableFluid.getStill(falling)); }
// public void beforeBreakingBlock(yarnwrap.world.WorldAccess world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state) { wrapperContained.beforeBreakingBlock(world.wrapperContained,pos.wrapperContained,state.wrapperContained); }
// public static void beforeBreakingBlock(yarnwrap.world.WorldAccess world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state, ) { net.minecraft.fluid.FlowableFluid.beforeBreakingBlock(world.wrapperContained,pos.wrapperContained,state.wrapperContained); }
// public boolean receivesFlow(yarnwrap.util.math.Direction face,yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.util.math.BlockPos fromPos,yarnwrap.block.BlockState fromState) { return wrapperContained.receivesFlow(face.wrapperContained,world.wrapperContained,pos.wrapperContained,state.wrapperContained,fromPos.wrapperContained,fromState.wrapperContained); }
// public static boolean receivesFlow(yarnwrap.util.math.Direction face,yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.util.math.BlockPos fromPos,yarnwrap.block.BlockState fromState, ) { return net.minecraft.fluid.FlowableFluid.receivesFlow(face.wrapperContained,world.wrapperContained,pos.wrapperContained,state.wrapperContained,fromPos.wrapperContained,fromState.wrapperContained); }
// public int getMaxFlowDistance(yarnwrap.world.WorldView world) { return wrapperContained.getMaxFlowDistance(world.wrapperContained); }
// public static int getMaxFlowDistance(yarnwrap.world.WorldView world, ) { return net.minecraft.fluid.FlowableFluid.getMaxFlowDistance(world.wrapperContained); }
// public boolean canFlowDownTo(yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.util.math.BlockPos fromPos,yarnwrap.block.BlockState fromState) { return wrapperContained.canFlowDownTo(world.wrapperContained,pos.wrapperContained,state.wrapperContained,fromPos.wrapperContained,fromState.wrapperContained); }
// public static boolean canFlowDownTo(yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.util.math.BlockPos fromPos,yarnwrap.block.BlockState fromState, ) { return net.minecraft.fluid.FlowableFluid.canFlowDownTo(world.wrapperContained,pos.wrapperContained,state.wrapperContained,fromPos.wrapperContained,fromState.wrapperContained); }
// public boolean isInfinite(yarnwrap.server.world.ServerWorld world) { return wrapperContained.isInfinite(world.wrapperContained); }
// public static boolean isInfinite(yarnwrap.server.world.ServerWorld world, ) { return net.minecraft.fluid.FlowableFluid.isInfinite(world.wrapperContained); }
// public int getLevelDecreasePerBlock(yarnwrap.world.WorldView world) { return wrapperContained.getLevelDecreasePerBlock(world.wrapperContained); }
// public static int getLevelDecreasePerBlock(yarnwrap.world.WorldView world, ) { return net.minecraft.fluid.FlowableFluid.getLevelDecreasePerBlock(world.wrapperContained); }
// public int countNeighboringSources(yarnwrap.world.WorldView world,yarnwrap.util.math.BlockPos pos) { return wrapperContained.countNeighboringSources(world.wrapperContained,pos.wrapperContained); }
// public static int countNeighboringSources(yarnwrap.world.WorldView world,yarnwrap.util.math.BlockPos pos, ) { return net.minecraft.fluid.FlowableFluid.countNeighboringSources(world.wrapperContained,pos.wrapperContained); }
// public int getBlockStateLevel(yarnwrap.fluid.FluidState state) { return wrapperContained.getBlockStateLevel(state.wrapperContained); }
// public static int getBlockStateLevel(yarnwrap.fluid.FluidState state, ) { return net.minecraft.fluid.FlowableFluid.getBlockStateLevel(state.wrapperContained); }
// public int getMinFlowDownDistance(yarnwrap.world.WorldView world,yarnwrap.util.math.BlockPos pos,int direction,yarnwrap.util.math.Direction state,yarnwrap.block.BlockState spreadCache) { return wrapperContained.getMinFlowDownDistance(world.wrapperContained,pos.wrapperContained,direction,state.wrapperContained,spreadCache.wrapperContained); }
// public static int getMinFlowDownDistance(yarnwrap.world.WorldView world,yarnwrap.util.math.BlockPos pos,int direction,yarnwrap.util.math.Direction state,yarnwrap.block.BlockState spreadCache, ) { return net.minecraft.fluid.FlowableFluid.getMinFlowDownDistance(world.wrapperContained,pos.wrapperContained,direction,state.wrapperContained,spreadCache.wrapperContained); }
// public void flowToSides(yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos pos,yarnwrap.fluid.FluidState fluidState,yarnwrap.block.BlockState blockState) { wrapperContained.flowToSides(world.wrapperContained,pos.wrapperContained,fluidState.wrapperContained,blockState.wrapperContained); }
// public static void flowToSides(yarnwrap.server.world.ServerWorld world,yarnwrap.util.math.BlockPos pos,yarnwrap.fluid.FluidState fluidState,yarnwrap.block.BlockState blockState, ) { net.minecraft.fluid.FlowableFluid.flowToSides(world.wrapperContained,pos.wrapperContained,fluidState.wrapperContained,blockState.wrapperContained); }
// public void flow(yarnwrap.world.WorldAccess world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.util.math.Direction direction,yarnwrap.fluid.FluidState fluidState) { wrapperContained.flow(world.wrapperContained,pos.wrapperContained,state.wrapperContained,direction.wrapperContained,fluidState.wrapperContained); }
// public static void flow(yarnwrap.world.WorldAccess world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.util.math.Direction direction,yarnwrap.fluid.FluidState fluidState, ) { net.minecraft.fluid.FlowableFluid.flow(world.wrapperContained,pos.wrapperContained,state.wrapperContained,direction.wrapperContained,fluidState.wrapperContained); }
// public boolean canFlowThrough(yarnwrap.world.BlockView world,yarnwrap.fluid.Fluid fluid,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.util.math.Direction face,yarnwrap.util.math.BlockPos fromPos,yarnwrap.block.BlockState fromState,yarnwrap.fluid.FluidState fluidState) { return wrapperContained.canFlowThrough(world.wrapperContained,fluid.wrapperContained,pos.wrapperContained,state.wrapperContained,face.wrapperContained,fromPos.wrapperContained,fromState.wrapperContained,fluidState.wrapperContained); }
// public static boolean canFlowThrough(yarnwrap.world.BlockView world,yarnwrap.fluid.Fluid fluid,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.util.math.Direction face,yarnwrap.util.math.BlockPos fromPos,yarnwrap.block.BlockState fromState,yarnwrap.fluid.FluidState fluidState, ) { return net.minecraft.fluid.FlowableFluid.canFlowThrough(world.wrapperContained,fluid.wrapperContained,pos.wrapperContained,state.wrapperContained,face.wrapperContained,fromPos.wrapperContained,fromState.wrapperContained,fluidState.wrapperContained); }
// public boolean isEmptyOrThis(yarnwrap.fluid.FluidState state) { return wrapperContained.isEmptyOrThis(state.wrapperContained); }
// public static boolean isEmptyOrThis(yarnwrap.fluid.FluidState state, ) { return net.minecraft.fluid.FlowableFluid.isEmptyOrThis(state.wrapperContained); }
// public boolean isFlowBlocked(yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.util.math.Direction direction) { return wrapperContained.isFlowBlocked(world.wrapperContained,pos.wrapperContained,direction.wrapperContained); }
// public static boolean isFlowBlocked(yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.util.math.Direction direction, ) { return net.minecraft.fluid.FlowableFluid.isFlowBlocked(world.wrapperContained,pos.wrapperContained,direction.wrapperContained); }
public yarnwrap.fluid.Fluid getFlowing() { return new yarnwrap.fluid.Fluid(wrapperContained.getFlowing()); }
// public static yarnwrap.fluid.Fluid getFlowing() { return new yarnwrap.fluid.Fluid(net.minecraft.fluid.FlowableFluid.getFlowing()); }
public yarnwrap.fluid.Fluid getStill() { return new yarnwrap.fluid.Fluid(wrapperContained.getStill()); }
// public static yarnwrap.fluid.Fluid getStill() { return new yarnwrap.fluid.Fluid(net.minecraft.fluid.FlowableFluid.getStill()); }
// public boolean isMatchingAndStill(yarnwrap.fluid.FluidState state) { return wrapperContained.isMatchingAndStill(state.wrapperContained); }
// public static boolean isMatchingAndStill(yarnwrap.fluid.FluidState state, ) { return net.minecraft.fluid.FlowableFluid.isMatchingAndStill(state.wrapperContained); }
// public int getNextTickDelay(yarnwrap.world.World world,yarnwrap.util.math.BlockPos pos,yarnwrap.fluid.FluidState oldState,yarnwrap.fluid.FluidState newState) { return wrapperContained.getNextTickDelay(world.wrapperContained,pos.wrapperContained,oldState.wrapperContained,newState.wrapperContained); }
// public static int getNextTickDelay(yarnwrap.world.World world,yarnwrap.util.math.BlockPos pos,yarnwrap.fluid.FluidState oldState,yarnwrap.fluid.FluidState newState, ) { return net.minecraft.fluid.FlowableFluid.getNextTickDelay(world.wrapperContained,pos.wrapperContained,oldState.wrapperContained,newState.wrapperContained); }
// public boolean canFill(yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.fluid.Fluid fluid) { return wrapperContained.canFill(world.wrapperContained,pos.wrapperContained,state.wrapperContained,fluid.wrapperContained); }
// public static boolean canFill(yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.fluid.Fluid fluid, ) { return net.minecraft.fluid.FlowableFluid.canFill(world.wrapperContained,pos.wrapperContained,state.wrapperContained,fluid.wrapperContained); }
// public yarnwrap.util.shape.VoxelShape method_17773(yarnwrap.world.BlockView state2) { return new yarnwrap.util.shape.VoxelShape(wrapperContained.method_17773(state2.wrapperContained)); }
// public static yarnwrap.util.shape.VoxelShape method_17773(yarnwrap.world.BlockView state2, ) { return new yarnwrap.util.shape.VoxelShape(net.minecraft.fluid.FlowableFluid.method_17773(state2.wrapperContained)); }
// public boolean isFluidAboveEqual(yarnwrap.fluid.FluidState state,yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos) { return wrapperContained.isFluidAboveEqual(state.wrapperContained,world.wrapperContained,pos.wrapperContained); }
// public static boolean isFluidAboveEqual(yarnwrap.fluid.FluidState state,yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos, ) { return net.minecraft.fluid.FlowableFluid.isFluidAboveEqual(state.wrapperContained,world.wrapperContained,pos.wrapperContained); }
// public boolean canFlowThrough(yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.util.math.Direction face,yarnwrap.util.math.BlockPos fromPos,yarnwrap.block.BlockState fromState,yarnwrap.fluid.FluidState fluidState) { return wrapperContained.canFlowThrough(world.wrapperContained,pos.wrapperContained,state.wrapperContained,face.wrapperContained,fromPos.wrapperContained,fromState.wrapperContained,fluidState.wrapperContained); }
// public static boolean canFlowThrough(yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.util.math.Direction face,yarnwrap.util.math.BlockPos fromPos,yarnwrap.block.BlockState fromState,yarnwrap.fluid.FluidState fluidState, ) { return net.minecraft.fluid.FlowableFluid.canFlowThrough(world.wrapperContained,pos.wrapperContained,state.wrapperContained,face.wrapperContained,fromPos.wrapperContained,fromState.wrapperContained,fluidState.wrapperContained); }
// public boolean canFill(yarnwrap.block.BlockState state) { return wrapperContained.canFill(state.wrapperContained); }
// public static boolean canFill(yarnwrap.block.BlockState state, ) { return net.minecraft.fluid.FlowableFluid.canFill(state.wrapperContained); }
// public boolean canFillWithFluid(yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.fluid.Fluid fluid) { return wrapperContained.canFillWithFluid(world.wrapperContained,pos.wrapperContained,state.wrapperContained,fluid.wrapperContained); }
// public static boolean canFillWithFluid(yarnwrap.world.BlockView world,yarnwrap.util.math.BlockPos pos,yarnwrap.block.BlockState state,yarnwrap.fluid.Fluid fluid, ) { return net.minecraft.fluid.FlowableFluid.canFillWithFluid(world.wrapperContained,pos.wrapperContained,state.wrapperContained,fluid.wrapperContained); }

}